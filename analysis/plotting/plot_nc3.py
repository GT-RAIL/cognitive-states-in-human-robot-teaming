from matplotlib import pyplot as plt
from matplotlib.patches import PathPatch
from matplotlib import cbook
import scipy.stats
import numpy
import seaborn
import pandas as pd
import pickle
import functools
import operator

# utility function for box plot spacing, lifted from StackOverflow.
#   original StackOverflow post is: https://stackoverflow.com/questions/56838187, however the poster does not cite their source
def adjust_box_widths(g, fac):
    """
    Adjust the widths of a seaborn-generated boxplot.
    """

    # iterating through Axes instances
    for ax in g.axes:

        # iterating through axes artists:
        for c in ax.get_children():

            # searching for PathPatches
            if isinstance(c, PathPatch):
                # getting current width of box:
                p = c.get_path()
                verts = p.vertices
                verts_sub = verts[:-1]
                xmin = numpy.min(verts_sub[:, 0])
                xmax = numpy.max(verts_sub[:, 0])
                xmid = 0.5*(xmin+xmax)
                xhalf = 0.5*(xmax - xmin)

                # setting new width of box
                xmin_new = xmid-fac*xhalf
                xmax_new = xmid+fac*xhalf
                verts_sub[verts_sub[:, 0] == xmin, 0] = xmin_new
                verts_sub[verts_sub[:, 0] == xmax, 0] = xmax_new

                # setting new width of median line
                for l in ax.lines:
                    if len(l.get_xdata()) != 0 and numpy.all(l.get_xdata() == [xmin, xmax]):
                        l.set_xdata([xmin_new, xmax_new])


# plots the n choose 3 plots from the score_data files generated by main.py
def plot_nc3():
    print("---------- Plotting the n choose 3 series of boxplots ----------")
    score_data_names = ["3c3", "4c3", "5c3", "6c3", "7c3"]  # the score_data files to plot, add or remove from this list

    df_group_size = []  # df means "dataframe", which is needed for seaborn plots; we reformat the data to fit this format
    df_team_scores = []
    df_assignment_type = []
    
    # for each data set
    saved_data = {}
    for name in score_data_names:
        print("Processing", name)

        # try opening the file
        try:
            file_name = "score_data_" + name + ".pkl"
            score_data = pickle.load(open(file_name, "rb"))  # load the score data
        except FileNotFoundError:
            print("  NOTE: Could not locate the file", file_name, "! To generate the file, change the sample_size parameter in main.py's allocation.assignment_util.process_users() function call to your desired 'n', and run main.py.")
            continue

        # score_data is represented as a list of lists, of dimensions [ #teams, scores from different assignment types ]

        # data type names, we only care about Individualized Role Assignment and Random Assignment for this plot
        data_types = ["best", "predicted score (without considering slopes)", "predicted score (considering slopes)", "Individualized Role Assignment", "worst", "expected value", "Random Assignment"]

        # generate the boxplots for ability and random; each index of the list is 
        for i in [3, 6]:  # 3:ability, 6:random
            print("  Generating boxplot for", data_types[i])
            data = [x[i] for x in score_data]  # pull the data
            if i == 6:  # flatten if random
                data = functools.reduce(operator.iconcat, data, [])

            # calculate the boxplot stats
            data = sorted(data)  # sort from small to large
            saved_data[name[0] + ":" + str(i)] = data  # save the data

            print("    Number of points", len(data))
            min_val = data[0]  # low
            max_val = data[-1]  # high
            num_items = len(data)
            even = False if num_items % 2 else True

            # get the middle value (if there are an even amount of values, this will choose the left-side one)
            q1_val = data[1 * num_items // 4]  # Q1
            q2_val = data[2 * num_items // 4]  # median
            q3_val = data[3 * num_items // 4]  # Q3

            if even:  # if even, average the calculated value and the next value
                q1_val = (q1_val + data[1 * num_items // 4 + 1]) / 2
                q2_val = (q2_val + data[2 * num_items // 4 + 1]) / 2
                q3_val = (q3_val + data[3 * num_items // 4 + 1]) / 2

            # add the data to the dataframe in "long" format
            df_group_size.extend([int(name[0])] * 5)  # add the group size to the dataframe
            df_team_scores.extend([min_val, q1_val, q2_val, q3_val, max_val])  # add the boxplot data to the dataframe
            print("    Boxplot info", name, [min_val, q1_val, q2_val, q3_val, max_val], "mean", sum(data) / len(data))
            df_assignment_type.extend([data_types[i]] * 5)  # add the assignment type label to the dataframe


    # calculate the Mann-Whitney U scores compared to the 3c3 baseline
    for comparisan in ["3:6", "4:3"]:  # 3:6 is 3c3 Random Assignment, 4:3 is 4c3 IRA assignment; feel free to add more comparisans here!
        # check if the comparisan data exists, it may not have been generated yet
        if comparisan not in saved_data:
            print("  Comparing 3c3 IRA (3:3) with", comparisan, "cannot be done, as", comparisan, "is not in the score data. You will need to generate this score data using main.py for this comparisan.")
            continue

        # calculate the Mann-Whitney U score
        u = scipy.stats.mannwhitneyu(saved_data["3:3"], saved_data[comparisan], alternative="greater")
        print("  Wilcoxan 3c3 IRA (3:3) and", comparisan, "results in a Mann-Whitney U of", u)

    # construct the DataFrame (for plotting)
    data = pd.DataFrame({"Size of Group (N)": df_group_size,
                         "Team Scores by Assignment Type": df_team_scores,
                         "Assignment Type": df_assignment_type,
                         })
    
    # plot the boxplot
    plt.figure()  # create a new figure
    ax = seaborn.boxplot(data=data, y='Team Scores by Assignment Type', x='Size of Group (N)', hue='Assignment Type', saturation=0.5, width=0.5,
                        boxprops={'zorder': 2}, whis=100, palette="Blues")
    ax.set_ylim([0,3.4])  # set the y axis limits
    ax.set_xlabel("Size of Group (N)", fontsize=25)  # set the x axis
    plt.xticks(fontsize=20)  # set the size of the x axis tick labels
    ax.set_ylabel("Cumulative Performance Score", fontsize=25)  # set the y axis
    plt.yticks(fontsize=20)  # set the size of the y axis tick labels
    plt.legend(fontsize=20, loc="upper right", frameon=False)  # set the legend

    adjust_box_widths(ax.get_figure(), 0.9)  # set the box plot widths wider
    ax.spines['right'].set_visible(False)  # hide the right line
    ax.spines['top'].set_visible(False)  # hide the top line


# by default, plot the boxplots
if __name__ == "__main__":
    plot_nc3()